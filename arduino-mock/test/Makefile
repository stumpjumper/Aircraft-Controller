# vim: set noexpandtab:
# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make test   - Run all tests
#   make clean  - removes all files generated by make.
#   make format - format coding style.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
#-#GTEST_DIR = ./googletest
GTEST_DIR = ../../gtest-1.7.0/

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = ../../gmock-1.7.0/

# Points to the root of Arduino mock, relative to where this file is.
# Remember to tweak this if you move this file.
ARDUINO_MOCK_DIR = ..

# Where to find user code.
TEST_DIR = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include \
		-I$(ARDUINO_MOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread \
		-Wno-missing-field-initializers \
		-Wno-missing-braces \
		-Wno-unused-command-line-argument


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = Arduino_unittest Wire_unittest Serial_unittest Spark_unittest EEPROM_unittest WiFi_unittest serialHelper_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
		$(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are included by Google Mock headers.
# Usually you shouldn't change this definition.
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# Arduino Mock headers.
# Usually you shouldn't change this definition.
ARDUINO_MOCK_HEADERS = $(ARDUINO_MOCK_DIR)/include/arduino-mock/*.h

# House-keeping build targets.

all : $(TESTS)

test : $(TESTS)
	for t in $(TESTS); do ./$$t; done;

clean :
	rm -f $(TESTS) gmock.a gtest_main.a gmock_main.a \
			arduino_mock_all.a *.o

format :
	../script/codeformatter.sh

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)
ARDUINO_MOCK_SRCS_ = $(ARDUINO_MOCK_DIR)/src/*.cc $(ARDUINO_MOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds Arduino mocks.
ArduinoMockAll.o : $(ARDUINO_MOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(ARDUINO_MOCK_DIR) $(CXXFLAGS) -c \
		$(ARDUINO_MOCK_DIR)/src/ArduinoMockAll.cc

arduino_mock_all.a : ArduinoMockAll.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

Serial_unittest.o : $(TEST_DIR)/Serial_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Serial_unittest.cc

Serial_unittest : Serial_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

serialHelper_unittest.o : $(TEST_DIR)/serialHelper_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/serialHelper_unittest.cc

serialHelper_unittest : serialHelper_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Spark_unittest.o : $(TEST_DIR)/Spark_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Spark_unittest.cc

Spark_unittest : Spark_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Arduino_unittest.o : $(TEST_DIR)/Arduino_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Arduino_unittest.cc

Arduino_unittest : Arduino_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

EEPROM_unittest.o : $(TEST_DIR)/EEPROM_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/EEPROM_unittest.cc

EEPROM_unittest : EEPROM_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

Wire_unittest.o : $(TEST_DIR)/Wire_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Wire_unittest.cc

Wire_unittest : Wire_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

WiFi_unittest.o : $(TEST_DIR)/WiFi_unittest.cc \
				$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/WiFi_unittest.cc

WiFi_unittest : WiFi_unittest.o \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
