# vim: set noexpandtab:
# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make test   - Run all tests
#   make clean  - removes all files generated by make.
#   make format - format coding style.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
#-#GTEST_DIR = ./googletest
GTEST_DIR = ../googletest/googletest/

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file
GMOCK_DIR = ../googletest/googlemock

# Points to the root of Arduino mock, relative to where this file is.
# Remember to tweak this if you move this file.
ARDUINO_MOCK_DIR = ../arduino-mock
ARDUINO_MOCK_INCLUDE_DIR = $(ARDUINO_MOCK_DIR)/include/arduino-mock
ARDUINO_DIR = /Applications/Arduino.app/Contents/Java
AVR_TOOLS_DIR =   $(ARDUINO_DIR)/hardware/tools/avr/avr/include
ARDUINO_VAR_PATH =$(ARDUINO_DIR)/hardware/arduino/avr/variants/standard


# Where to find test code.
TEST_DIR = tests
# Where to find src code.
SRC_DIR = src

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include \
		-I$(ARDUINO_MOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -D DOING_UNIT_TESTING \
		-Wall -Wextra -pthread \
		-Wno-missing-field-initializers \
		-Wno-missing-braces \
		-Wno-unused-command-line-argument


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#-# TESTS = Arduino_unittest Wire_unittest Serial_unittest Spark_unittest EEPROM_unittest WiFi_unittest serialHelper_unittest
UNIT_TESTS = F16_unittest B29_unittest timeofday_unittest \
	updownmotor_unittest lucky7_unittest light_unittest
INTEGRATION_TESTS = integration_test
TESTS = $(UNIT_TESTS) $(INTEGRATION_TESTS)

TEST_SRCS = integration_test.cpp F16_unittest.cpp B29_unittest.cpp \
	timeofday_unittest.cpp updownmotor_unittest.cpp lucky7_unittest.cpp \
	light_unittest.cpp
PROGRAM_DIRS = B-29 F-16 B-52a B-52b Adjustable AllLightsBlinking

PROGRAM_CPPS = $(PROGRAM_DIRS:%=%.cpp)
PROGRAM_INOS = $(PROGRAM_DIRS:%=%.ino)
PROGRAM_OBJS = $(PROGRAM_DIRS:%=%.o)


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
		$(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headeArs are
# included here too, as they are included by Google Mock headers.
# Usually you shouldn't change this definition.
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

# Arduino Mock headers.
# Usually you shouldn't change this definition.
ARDUINO_MOCK_HEADERS = $(ARDUINO_MOCK_INCLUDE_DIR)/*.h

# House-keeping build targets.

all : $(TESTS) $(PROGRAM_OBJS)

MY_TESTEXE_A=B29_unittest
MY_TEST_A1=B29Test.ArduinoMockMillis

MY_TESTEXE_B=light_unittest
MY_TEST_B1=DecayLight.Update2

MY_TESTEXE_C=integration_test
MY_TEST_C1=Integration.CycleThroughDay
mytest : $(TESTS)
	./$(MY_TESTEXE_A) --gtest_filter=$(MY_TEST_A1); if [ "$$?" == '1' ]; then exit 1; fi

test : $(TESTS)
	failed_test=""; for t in $(UNIT_TESTS); do ./$$t; if [ $$? -ne 0 ]; then failed_test="true"; fi; done; if [ -n "$$failed_test" ]; then echo "Had at least one test failure"; exit 1; else echo "All tests passed :-)"; fi

itest : $(UNIT_TESTS) $(INTEGRATION_TESTS)
	failed_test=""; for t in $(INTEGRATION_TESTS); do ./$$t; if [ $$? -ne 0 ]; then failed_test="true"; fi; done; if [ -n "$$failed_test" ]; then echo "Had at least one test failure"; exit 1; else echo "All tests passed :-)"; fi

clean :
	rm -f $(TESTS) gmock.a gtest_main.a gmock_main.a \
	arduino_mock_all.a B-29.a *.o

cleandepend :
	rm -f depend; touch depend

format :
	../script/codeformatter.sh

kill:
	echo "" > /dev/null

rm_links:
	find . -type l -exec rm -v {} \;

cpp_links: rm_links
	current_dir="$(CURDIR)"; for arg in $(PROGRAM_DIRS); do cd "$${current_dir}/$${arg}"; if [ ! -f "$${arg}.cpp" ]; then echo creating: $${arg}.cpp "->" $${arg}.ino ; ln -s "$${arg}.ino" "$${arg}.cpp"; fi; done
	current_dir="$(CURDIR)"; cd $(SRC_DIR); for arg in $(PROGRAM_DIRS); do if [ ! -f "$${arg}.cpp" ]; then echo creating: $${arg}.cpp "->" "../$${arg}/$${arg}.cpp" ; ln -s "../$${arg}/$${arg}.cpp" "$${arg}.cpp"; fi; done
	current_dir="$(CURDIR)"; cd $(SRC_DIR); for arg in $(PROGRAM_DIRS); do if [ ! -f "$${arg}.ino" ]; then echo creating: $${arg}.ino "->" "../$${arg}/$${arg}.ino" ; ln -s "../$${arg}/$${arg}.ino" "$${arg}.ino"; fi; done

arduino_links: rm_links
	current_dir="$(CURDIR)"; for arg in $(PROGRAM_DIRS); do cd "$${current_dir}/$${arg}"; ln -vs ../src/*.h .; ln -vs ../src/*.cpp .; done

depends : 
	pwd
	makedepend -f depend --  -I$(SRC_DIR) -Itests -I$(ARDUINO_MOCK_INCLUDE_DIR) -I$(GTEST_DIR)/include \
	-I$(GMOCK_DIR)/include -I$(TEST_DIR) -- $(TEST_DIR)/*.cpp $(SRC_DIR)/*.cpp
	sed -e 's#^tests/##p' -e 's#^src/##p' depend > depend_tmp
	mv depend_tmp depend
#       =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-=
	sed -e 's|Google Drive|Google\\ Drive|g' depend > depend_tmp
	mv depend_tmp depend
	sed -e 's|GDrive projects|GDrive\\ projects|g' depend > depend_tmp
	mv depend_tmp depend
#       =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-= Hack =-=

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)
ARDUINO_MOCK_SRCS_ = $(ARDUINO_MOCK_DIR)/src/*.cc $(ARDUINO_MOCK_HEADERS)

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds Arduino mocks.
ArduinoMockAll.o : $(ARDUINO_MOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(ARDUINO_MOCK_DIR) $(CXXFLAGS) -c \
		$(ARDUINO_MOCK_DIR)/src/ArduinoMockAll.cc

arduino_mock_all.a : ArduinoMockAll.o
	$(AR) $(ARFLAGS) $@ $^


lucky7.o : $(SRC_DIR)/lucky7.cpp  $(SRC_DIR)/lucky7.h
	$(CXX) $(CPPFLAGS) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c \
		$(SRC_DIR)/lucky7.cpp

%.o : B-29/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

%.o : F-16/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

%.o : B-52a/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

%.o : B-52b/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

%.o : Adjustable/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

%.o : AllLightsBlinking/%.cpp
	$(CXX) $(CPPFLAGS) -I$(SRC_DIR) -I$(ARDUINO_MOCK_INCLUDE_DIR) $(CXXFLAGS) -c $<

B-29.a : lucky7.o $(PROGRAM_DIRS:=.o)
	$(AR) $(ARFLAGS) $@ $^

# Builds a test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

%.o: $(TEST_DIR)/%.cpp
	@echo "----------------"
	@echo Building $@
	@echo "----------------"
	$(CXX) $(CPPFLAGS) -I$(ARDUINO_MOCK_INCLUDE_DIR) -I$(SRC_DIR) $(CXXFLAGS) -c $<

integration_test : integration_test.o \
				B-29.a \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
F16_unittest : F16_unittest.o B-29.a gmock_main.a arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
B29_unittest : B29_unittest.o B-29.a gmock_main.a arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
timeofday_unittest : timeofday_unittest.o \
				B-29.a \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
updownmotor_unittest : updownmotor_unittest.o \
				B-29.a \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
lucky7_unittest : lucky7_unittest.o \
				B-29.a \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
light_unittest : light_unittest.o \
				B-29.a \
				gmock_main.a  \
				arduino_mock_all.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#----------
light_unittest.o : $(TEST_DIR)/light_unittest.cpp $(SRC_DIR)/lucky7.h \
				$(GTEST_HEADERS)

include depend
